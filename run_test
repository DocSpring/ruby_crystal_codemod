#!/bin/bash
set -eo pipefail

./exe/rufo --simple-exit example_code

# Some tests that produce invalid code, but just make sure the script doesn't crash for
# unexpected input.
EXAMPLE_INVALID_EXPECTED=$(cat <<EOF
require_relative
require 123
require :asdf
require ["asdf"]
require %w[asdf]
require_relative({ aasdf: 232 })
EOF
)
EXAMPLE_INVALID="$(cat example_code/example_invalid.cr)"
if [ "$EXAMPLE_INVALID" != "$EXAMPLE_INVALID_EXPECTED" ]; then
  echo "Invalid example does not match the expected value!"
  echo "EXAMPLE_INVALID_EXPECTED:"
  echo "-------------------------------------"
  echo "$EXAMPLE_INVALID_EXPECTED"
  echo
  echo "example_code/example_invalid.cr:"
  echo "-------------------------------------"
  echo "$EXAMPLE_INVALID"
  exit 1
fi

# Require rules were tricky to rewrite, so here's a few more tests
EXAMPLE_REQUIRE_PARENS_EXPECTED=$(cat <<EOF
require_relative
require 123
require :asdf
require ["asdf"]
require %w[asdf]
require_relative({ aasdf: 232 })
EOF
)
EXAMPLE_REQUIRE_PARENS="$(cat example_code/require_relative_paren.cr)"
if [ "$EXAMPLE_REQUIRE_PARENS" != "$EXAMPLE_REQUIRE_PARENS_EXPECTED" ]; then
  echo "Require parens example does not match the expected value!"
  echo "EXAMPLE_REQUIRE_PARENS_EXPECTED:"
  echo "-------------------------------------"
  echo "$EXAMPLE_REQUIRE_PARENS_EXPECTED"
  echo
  echo "example_code/require_relative_paren.cr:"
  echo "-------------------------------------"
  echo "$EXAMPLE_REQUIRE_PARENS"
  exit 1
fi



RUBY_OUTPUT=$(ruby ./example_code/example.rb 2>&1 || true)
CRYSTAL_OUTPUT=$(crystal run ./example_code/example.cr 2>&1 || true)

if [ "$RUBY_OUTPUT" = "$CRYSTAL_OUTPUT" ]; then
  echo "Ruby stdout+stderr matches Crystal stdout+stderr!"
  echo "Output:"
  echo "-------------------------------------"
  echo "$CRYSTAL_OUTPUT"
else
  echo "Ruby output didn't match Crystal output!"
  echo "Ruby:"
  echo "-------------------------------------"
  echo "$RUBY_OUTPUT"
  echo
  echo "Crystal:"
  echo "-------------------------------------"
  echo "$CRYSTAL_OUTPUT"
fi
